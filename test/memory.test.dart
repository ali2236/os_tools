import 'package:os_aligator_ir/src/components/playgrounds/frameAllocation/algorithms/optimal.dart';
import 'package:os_aligator_ir/src/components/playgrounds/frameAllocation/models/allocation_snapshot.dart';
import 'package:os_aligator_ir/src/components/playgrounds/frameAllocation/models/allocation_timeline.dart';
import 'package:os_aligator_ir/src/components/playgrounds/frameAllocation/models/frame.dart';
import 'package:os_aligator_ir/src/components/playgrounds/frameAllocation/models/memory_stack.dart';
import 'package:test/test.dart';

void main() {
  group('Memory Frame Allocation algorithms', () {
    test('Optimal policy', () {
      expect(
        OptimalPolicyAllocator()
            .calculate([2, 3, 2, 1, 5, 2, 4, 5, 3, 2, 5, 2], 3),
        equals(
          AllocationTimeline([
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(null),
                Frame(null),
                Frame(null),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(null),
                Frame(null),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(null),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(null),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(1),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(4),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(4),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(4),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              true,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(5),
              ]),
            ),
            AllocationSnapshot(
              false,
              MemoryStack.fromFrames([
                Frame(2),
                Frame(3),
                Frame(5),
              ]),
            ),
          ]),
        ),
      );
    });
  });
}
